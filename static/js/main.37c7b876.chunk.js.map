{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialExperts","Object","entries","expertInfo","experts","filter","pair","obtain","map","allExperts","sort","getStageStates","have","stages","_ref","id","reqs","satisfied","req","find","expertAry","includes","genres","traits","status","length","Trait","_ref2","react_default","a","createElement","Chip","label","style","backgroundColor","color","stageStyle","borderRadius","marginBottom","Stage","_ref3","stage","difficulty","ListItem","Typography","fontWeight","List","s","idx","key","concat","App_Trait","ExpertSelect","_useState","useState","_useState2","slicedToArray","selected","setSelected","_useState3","_useState4","gains","setGains","useEffect","newGains","currentNormal","normal","currentElite","elite","expert","owned","newNormal","newElite","normalGain","cStage","eliteGain","calculateGainPerExpert","selectExpert","event","target","value","other","topExperts","sortBy","Fragment","Grid","container","item","xs","expertId","sm","md","lg","FormControlLabel","control","Checkbox","onChange","checked","Divider","textAlign","fontSize","direction","spacing","cost","size","g","join","t","fontStyle","App_Stage","App","AppBar","position","Toolbar","Container","paddingTop","App_ExpertSelect","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37c7b876.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { find, sortBy } from 'lodash';\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\n\nimport expertInfo from './experts';\n\nconst initialExperts = Object.entries(expertInfo.experts)\n  .filter(pair => (pair[1].obtain === 'Story'))\n  .map(pair => pair[0]);\n\nconst allExperts = Object.entries(expertInfo.experts)\n  .map(pair => pair[0]).sort();\n\nconst calculateGainPerExpert = (selected) => {\n  const currentNormal = getStageStates(selected, expertInfo.stages.normal);\n  const currentElite = getStageStates(selected, expertInfo.stages.elite);\n\n  return allExperts.map(expert => {\n    if (selected.includes(expert)) {\n      return ({ id: expert, owned: true });\n    }\n\n    const newNormal = getStageStates(selected.concat(expert), expertInfo.stages.normal);\n    const newElite = getStageStates(selected.concat(expert), expertInfo.stages.elite);\n\n    return ({\n      id: expert,\n      normalGain: newNormal.filter(stage => find(currentNormal, cStage => cStage.id === stage.id && cStage.status < stage.status)),\n      eliteGain: newElite.filter(stage => find(currentElite, cStage => cStage.id === stage.id &&  cStage.status < stage.status)),\n    });\n  });\n};\n\nconst getStageStates = (have, stages) => (stages.map(({ id, reqs }) => {\n  const satisfied = reqs.filter(req => (\n    find(Object.entries(expertInfo.experts), expertAry => (\n      have.includes(expertAry[0]) &&\n      (req[0] === null || expertAry[1].genres.includes(req[0])) &&\n      (req[1] === null || expertAry[1].traits.includes(req[1]))\n    ))\n  ));\n  let status = 0;\n  if (satisfied.length === reqs.length) {\n    status = 2;\n  } else if (satisfied.length === 1 && reqs.length === 2) {\n    status = 1;\n  }\n  return {id, status};\n}));\n\nconst Trait = ({ id }) => (\n  <Chip\n    label={expertInfo.traits[id].id}\n    style={{ backgroundColor: expertInfo.traits[id].color }}\n  />\n);\n\nconst stageStyle = { backgroundColor: '#efefef', borderRadius: '4px', marginBottom: '.5rem' };\n\nconst Stage = ({ stage, difficulty }) => (\n  <ListItem style={stageStyle}>\n    <Typography style={{ fontWeight: 'bold' }}>{stage.id}</Typography>\n    <br />\n    <List>\n      {find(expertInfo.stages[difficulty], s => s.id === stage.id).reqs.map((req, idx) => (\n        <ListItem key={`${req[0]}, ${req[1]}, ${idx}`}>\n          {req[0] !== null && expertInfo.genres[req[0]]+ ' | '}\n          {req[1] !== null && <Trait id={req[1]} />}\n        </ListItem>\n      ))}\n    </List>\n  </ListItem>\n);\n\nconst ExpertSelect = () => {\n  const [selected, setSelected] = useState(initialExperts);\n  const [gains, setGains] = useState([]);\n\n  useEffect(() => {\n    const newGains = calculateGainPerExpert(selected);\n    setGains(newGains);\n  }, [selected]);\n\n  const selectExpert = (event) => {\n    const expert = event.target.value;\n    if (selected.includes(expert)) {\n      setSelected(selected.filter(other => other !== expert));\n    } else {\n      setSelected(selected.concat(expert));\n    }\n  };\n\n  const topExperts = sortBy(gains, expert => -1 *((expert.normalGain || []).length + (expert.eliteGain || []).length));\n\n  return (\n    <>\n      <Grid container item xs={12}>\n        <Grid item xs={12}>\n          <Typography>Please check all experts you currently possess</Typography>\n        </Grid>\n        {allExperts.map(expertId => (\n          <Grid item xs={6} sm={4} md={3} lg={2} key={expertId}>\n            <FormControlLabel\n              control={<Checkbox onChange={selectExpert} />}\n              label={<Typography>{expertId}</Typography>}\n              value={expertId}\n              checked={selected.includes(expertId)}\n            />\n          </Grid>\n        ))}\n      </Grid>\n      <Divider />\n      <Grid item xs={12} style={{ textAlign: 'center' }}>\n        <Typography style={{ fontSize: '24px', fontWeight: 'bold' }}>I recommend...</Typography>\n      </Grid>\n      {topExperts.map((expert, idx) => (\n        <Grid container item direction='row' spacing={2} key={expert.id}>\n          <Grid item xs={12} md={4}>\n            <Typography style={{ fontWeight: 'bold' }}>{expert.id}</Typography>\n            <Typography>\n              {expertInfo.experts[expert.id].obtain !== 'Story' ?\n                (<>\n                  {expertInfo.experts[expert.id].cost} medals<br />\n                  Requires {expertInfo.experts[expert.id].obtain} investigator level\n                </>) :\n                'Given automatically by completing story missions'\n              }\n            </Typography>\n            {idx === 0 && <div style={{ color: 'gold', size: '3rem', fontWeight: 'bold' }}> 1st ♕</div>}\n            {idx === 1 && <div style={{ color: 'silver', size: '3rem', fontWeight: 'bold' }}> 2nd ♕</div>}\n            {idx === 2 && <div style={{ color: 'peru', size: '3rem', fontWeight: 'bold' }}> 3rd♕</div>}\n            <div>{expertInfo.experts[expert.id].genres.map(g => expertInfo.genres[g]).join(' | ')}</div>\n            {expertInfo.experts[expert.id].traits.map(t => (<Trait key={t} id={t} />))}\n          </Grid>\n          {expert.owned ? (\n            <Grid item xs={12} md={8}><Typography>You have this expert.</Typography></Grid>\n          ) : (\n            (expert.normalGain.length + expert.eliteGain.length) === 0 ? (\n              <Grid item xs={12} md={8}><Typography>You would gain nothing by obtaining this expert.</Typography></Grid>\n            ) : (\n              <>\n                <Grid item xs={12} sm={6} md={4}>\n                  <Typography style={{ fontStyle: 'italic' }}>Satisfies normal stages:</Typography>\n                  <List>\n                    {expert.normalGain.map(stage => (\n                      <Stage key={stage.id} stage={stage} difficulty='normal'/>\n                    ))}\n                  </List>\n                </Grid>\n                <Grid item xs={12} sm={6} md={4}>\n                  <Typography style={{ fontStyle: 'italic' }}>Satisfies elite stages:</Typography>\n                  <List>\n                    {expert.eliteGain.map(stage => (\n                      <Stage key={stage.id} stage={stage} difficulty='elite'/>\n                    ))}\n                  </List>\n                </Grid>\n              </>\n            )\n          )}\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n        </Grid>\n      ))}\n      </>\n  );\n};\n\nfunction App() {\n  return (\n    <>\n      <AppBar position='sticky'>\n        <Toolbar>\n          Mr. Love - Expert Calculator\n        </Toolbar>\n      </AppBar>\n      <Container style={{ paddingTop: '1rem' }}>\n        <Grid container direction='column' spacing={2}>\n          <ExpertSelect />\n        </ Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}